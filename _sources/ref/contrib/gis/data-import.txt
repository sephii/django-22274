Geographical data importation
=============================

The following guide will show you how to import world borders data into your
database.

.. _worldborders:

World Borders
-------------

The world borders data is available in this `zip file`__.  Create a ``data``
directory in the ``world`` application, download the world borders data, and
unzip. On GNU/Linux platforms, use the following commands:

.. code-block:: console

    $ mkdir world/data
    $ cd world/data
    $ wget http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip
    $ unzip TM_WORLD_BORDERS-0.3.zip
    $ cd ../..

The world borders ZIP file contains a set of data files collectively known as
an `ESRI Shapefile`__, one of the most popular geospatial data formats.  When
unzipped, the world borders dataset includes files with the following
extensions:

* ``.shp``: Holds the vector data for the world borders geometries.
* ``.shx``: Spatial index file for geometries stored in the ``.shp``.
* ``.dbf``: Database file for holding non-geometric attribute data
  (e.g., integer and character fields).
* ``.prj``: Contains the spatial reference information for the geographic
  data stored in the shapefile.

__ http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.zip
__ https://en.wikipedia.org/wiki/Shapefile

Use ``ogrinfo`` to examine spatial data
---------------------------------------

The GDAL ``ogrinfo`` utility allows examining the metadata of shapefiles or
other vector data sources:

.. code-block:: console

    $ ogrinfo world/data/TM_WORLD_BORDERS-0.3.shp
    INFO: Open of `world/data/TM_WORLD_BORDERS-0.3.shp'
          using driver `ESRI Shapefile' successful.
    1: TM_WORLD_BORDERS-0.3 (Polygon)

``ogrinfo`` tells us that the shapefile has one layer, and that this
layer contains polygon data.  To find out more, we'll specify the layer name
and use the ``-so`` option to get only the important summary information:

.. code-block:: console

    $ ogrinfo -so world/data/TM_WORLD_BORDERS-0.3.shp TM_WORLD_BORDERS-0.3
    INFO: Open of `world/data/TM_WORLD_BORDERS-0.3.shp'
          using driver `ESRI Shapefile' successful.

    Layer name: TM_WORLD_BORDERS-0.3
    Geometry: Polygon
    Feature Count: 246
    Extent: (-180.000000, -90.000000) - (180.000000, 83.623596)
    Layer SRS WKT:
    GEOGCS["GCS_WGS_1984",
        DATUM["WGS_1984",
            SPHEROID["WGS_1984",6378137.0,298.257223563]],
        PRIMEM["Greenwich",0.0],
        UNIT["Degree",0.0174532925199433]]
    FIPS: String (2.0)
    ISO2: String (2.0)
    ISO3: String (3.0)
    UN: Integer (3.0)
    NAME: String (50.0)
    AREA: Integer (7.0)
    POP2005: Integer (10.0)
    REGION: Integer (3.0)
    SUBREGION: Integer (3.0)
    LON: Real (8.3)
    LAT: Real (7.3)

This detailed summary information tells us the number of features in the layer
(246), the geographic bounds of the data, the spatial reference system
("SRS WKT"), as well as type information for each attribute field. For example,
``FIPS: String (2.0)`` indicates that the ``FIPS`` character field has
a maximum length of 2.  Similarly, ``LON: Real (8.3)`` is a floating-point
field that holds a maximum of 8 digits up to three decimal places.

Geographic Models
=================

Defining a Geographic Model
---------------------------

Now that you've examined your dataset using ``ogrinfo``, create a GeoDjango
model to represent this data::

    from django.contrib.gis.db import models

    class WorldBorder(models.Model):
        # Regular Django fields corresponding to the attributes in the
        # world borders shapefile.
        name = models.CharField(max_length=50)
        area = models.IntegerField()
        pop2005 = models.IntegerField('Population 2005')
        fips = models.CharField('FIPS Code', max_length=2)
        iso2 = models.CharField('2 Digit ISO', max_length=2)
        iso3 = models.CharField('3 Digit ISO', max_length=3)
        un = models.IntegerField('United Nations Code')
        region = models.IntegerField('Region Code')
        subregion = models.IntegerField('Sub-Region Code')
        lon = models.FloatField()
        lat = models.FloatField()

        # GeoDjango-specific: a geometry field (MultiPolygonField)
        mpoly = models.MultiPolygonField()

        # Returns the string representation of the model.
        def __str__(self):              # __unicode__ on Python 2
            return self.name

Note that the ``models`` module is imported from ``django.contrib.gis.db``.

The default spatial reference system for geometry fields is WGS84 (meaning
the `SRID`__ is 4326) -- in other words, the field coordinates are in
longitude, latitude pairs in units of degrees.  To use a different
coordinate system, set the SRID of the geometry field with the ``srid``
argument. Use an integer representing the coordinate system's EPSG code.

__ https://en.wikipedia.org/wiki/SRID

Run ``migrate``
---------------

After defining your model, you need to sync it with the database. First,
create a database migration:

.. code-block:: console

    $ python manage.py makemigrations
    Migrations for 'world':
      world/migrations/0001_initial.py:
        - Create model WorldBorder

Let's look at the SQL that will generate the table for the ``WorldBorder``
model:

.. code-block:: console

    $ python manage.py sqlmigrate world 0001

This command should produce the following output:

.. code-block:: sql

    BEGIN;
    --
    -- Create model WorldBorder
    --
    CREATE TABLE "world_worldborder" (
        "id" serial NOT NULL PRIMARY KEY,
        "name" varchar(50) NOT NULL,
        "area" integer NOT NULL,
        "pop2005" integer NOT NULL,
        "fips" varchar(2) NOT NULL,
        "iso2" varchar(2) NOT NULL,
        "iso3" varchar(3) NOT NULL,
        "un" integer NOT NULL,
        "region" integer NOT NULL,
        "subregion" integer NOT NULL,
        "lon" double precision NOT NULL,
        "lat" double precision NOT NULL
        "mpoly" geometry(MULTIPOLYGON,4326) NOT NULL
    )
    ;
    CREATE INDEX "world_worldborder_mpoly_id" ON "world_worldborder" USING GIST ( "mpoly" );
    COMMIT;

If this looks correct, run :djadmin:`migrate` to create this table in the
database:

.. code-block:: console

    $ python manage.py migrate
    Operations to perform:
      Apply all migrations: admin, auth, contenttypes, sessions, world
    Running migrations:
      ...
      Applying world.0001_initial... OK

Importing Spatial Data
======================

This section will show you how to import the world borders shapefile into the
database via GeoDjango models using the :doc:`layermapping`.

There are many different ways to import data into a spatial database --
besides the tools included within GeoDjango, you may also use the following:

* `ogr2ogr`_: A command-line utility included with GDAL that
  can import many vector data formats into PostGIS, MySQL, and Oracle databases.
* `shp2pgsql`_: This utility included with PostGIS imports ESRI shapefiles into
  PostGIS.

.. _ogr2ogr: http://www.gdal.org/ogr2ogr.html
.. _shp2pgsql: http://postgis.net/docs/manual-1.5/ch04.html#shp2pgsql_usage

.. _gdalinterface:

GDAL Interface
--------------

Earlier, you used ``ogrinfo`` to examine the contents of the world borders
shapefile.  GeoDjango also includes a Pythonic interface to GDAL's powerful OGR
library that can work with all the vector data sources that OGR supports.

First, invoke the Django shell:

.. code-block:: console

    $ python manage.py shell

If you downloaded the :ref:`worldborders` data earlier in the
tutorial, then you can determine its path using Python's built-in
``os`` module::

    >>> import os
    >>> import world
    >>> world_shp = os.path.abspath(os.path.join(os.path.dirname(world.__file__),
    ...                             'data', 'TM_WORLD_BORDERS-0.3.shp'))

Now, open the world borders shapefile using GeoDjango's
:class:`~django.contrib.gis.gdal.DataSource` interface::

    >>> from django.contrib.gis.gdal import DataSource
    >>> ds = DataSource(world_shp)
    >>> print(ds)
    / ... /geodjango/world/data/TM_WORLD_BORDERS-0.3.shp (ESRI Shapefile)

Data source objects can have different layers of geospatial features; however,
shapefiles are only allowed to have one layer::

    >>> print(len(ds))
    1
    >>> lyr = ds[0]
    >>> print(lyr)
    TM_WORLD_BORDERS-0.3

You can see the layer's geometry type and how many features it contains::

    >>> print(lyr.geom_type)
    Polygon
    >>> print(len(lyr))
    246

.. note::

    Unfortunately, the shapefile data format does not allow for greater
    specificity with regards to geometry types.  This shapefile, like
    many others, actually includes ``MultiPolygon`` geometries, not Polygons.
    It's important to use a more general field type in models: a
    GeoDjango ``MultiPolygonField`` will accept a ``Polygon`` geometry, but a
    ``PolygonField`` will not accept a ``MultiPolygon`` type geometry.  This
    is why the ``WorldBorder`` model defined above uses a ``MultiPolygonField``.

The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial reference
system associated with it.  If it does, the ``srs`` attribute will return a
:class:`~django.contrib.gis.gdal.SpatialReference` object::

    >>> srs = lyr.srs
    >>> print(srs)
    GEOGCS["GCS_WGS_1984",
        DATUM["WGS_1984",
            SPHEROID["WGS_1984",6378137.0,298.257223563]],
        PRIMEM["Greenwich",0.0],
        UNIT["Degree",0.0174532925199433]]
    >>> srs.proj4 # PROJ.4 representation
    '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs '

This shapefile is in the popular WGS84 spatial reference
system -- in other words, the data uses longitude, latitude pairs in
units of degrees.

In addition, shapefiles also support attribute fields that may contain
additional data.  Here are the fields on the World Borders layer:

    >>> print(lyr.fields)
    ['FIPS', 'ISO2', 'ISO3', 'UN', 'NAME', 'AREA', 'POP2005', 'REGION', 'SUBREGION', 'LON', 'LAT']

The following code will let you examine the OGR types (e.g. integer or
string) associated with each of the fields:

    >>> [fld.__name__ for fld in lyr.field_types]
    ['OFTString', 'OFTString', 'OFTString', 'OFTInteger', 'OFTString', 'OFTInteger', 'OFTInteger', 'OFTInteger', 'OFTInteger', 'OFTReal', 'OFTReal']

You can iterate over each feature in the layer and extract information from both
the feature's geometry (accessed via the ``geom`` attribute) as well as the
feature's attribute fields (whose **values** are accessed via ``get()``
method)::

    >>> for feat in lyr:
    ...    print(feat.get('NAME'), feat.geom.num_points)
    ...
    Guernsey 18
    Jersey 26
    South Georgia South Sandwich Islands 338
    Taiwan 363

:class:`~django.contrib.gis.gdal.Layer` objects may be sliced::

    >>> lyr[0:2]
    [<django.contrib.gis.gdal.feature.Feature object at 0x2f47690>, <django.contrib.gis.gdal.feature.Feature object at 0x2f47650>]

And individual features may be retrieved by their feature ID::

    >>> feat = lyr[234]
    >>> print(feat.get('NAME'))
    San Marino

Boundary geometries may be exported as WKT and GeoJSON::

    >>> geom = feat.geom
    >>> print(geom.wkt)
    POLYGON ((12.415798 43.957954,12.450554 ...
    >>> print(geom.json)
    { "type": "Polygon", "coordinates": [ [ [ 12.415798, 43.957954 ], [ 12.450554, 43.979721 ], ...


``LayerMapping``
----------------

To import the data, use a LayerMapping in a Python script.
Create a file called ``load.py`` inside the ``world`` application,
with the following code::

    import os
    from django.contrib.gis.utils import LayerMapping
    from .models import WorldBorder

    world_mapping = {
        'fips' : 'FIPS',
        'iso2' : 'ISO2',
        'iso3' : 'ISO3',
        'un' : 'UN',
        'name' : 'NAME',
        'area' : 'AREA',
        'pop2005' : 'POP2005',
        'region' : 'REGION',
        'subregion' : 'SUBREGION',
        'lon' : 'LON',
        'lat' : 'LAT',
        'mpoly' : 'MULTIPOLYGON',
    }

    world_shp = os.path.abspath(os.path.join(os.path.dirname(__file__), 'data', 'TM_WORLD_BORDERS-0.3.shp'))

    def run(verbose=True):
        lm = LayerMapping(WorldBorder, world_shp, world_mapping,
                          transform=False, encoding='iso-8859-1')

        lm.save(strict=True, verbose=verbose)

A few notes about what's going on:

* Each key in the ``world_mapping`` dictionary corresponds to a field in the
  ``WorldBorder`` model.  The value is the name of the shapefile field
  that data will be loaded from.
* The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the
  geometry type GeoDjango will import the field as.  Even simple polygons in
  the shapefile will automatically be converted into collections prior to
  insertion into the database.
* The path to the shapefile is not absolute -- in other words, if you move the
  ``world`` application (with ``data`` subdirectory) to a different location,
  the script will still work.
* The ``transform`` keyword is set to ``False`` because the data in the
  shapefile does not need to be converted -- it's already in WGS84 (SRID=4326).
* The ``encoding`` keyword is set to the character encoding of the string
  values in the shapefile. This ensures that string values are read and saved
  correctly from their original encoding system.

Afterwards, invoke the Django shell from the ``geodjango`` project directory:

.. code-block:: console

    $ python manage.py shell

Next, import the ``load`` module, call the ``run`` routine, and watch
``LayerMapping`` do the work::

    >>> from world import load
    >>> load.run()

.. _ogrinspect-intro:

Try ``ogrinspect``
------------------
Now that you've seen how to define geographic models and import data with the
:doc:`layermapping`, it's possible to further automate this process with
use of the :djadmin:`ogrinspect` management command.  The :djadmin:`ogrinspect`
command  introspects a GDAL-supported vector data source (e.g., a shapefile)
and generates a model definition and ``LayerMapping`` dictionary automatically.

The general usage of the command goes as follows:

.. code-block:: console

    $ python manage.py ogrinspect [options] <data_source> <model_name> [options]

``data_source`` is the path to the GDAL-supported data source and
``model_name`` is the name to use for the model.  Command-line options may
be used to further define how the model is generated.

For example, the following command nearly reproduces the ``WorldBorder`` model
and mapping dictionary created above, automatically:

.. code-block:: console

    $ python manage.py ogrinspect world/data/TM_WORLD_BORDERS-0.3.shp WorldBorder \
        --srid=4326 --mapping --multi

A few notes about the command-line options given above:

* The ``--srid=4326`` option sets the SRID for the geographic field.
* The ``--mapping`` option tells ``ogrinspect`` to also generate a
  mapping dictionary for use with
  :class:`~django.contrib.gis.utils.LayerMapping`.
* The ``--multi`` option is specified so that the geographic field is a
  :class:`~django.contrib.gis.db.models.MultiPolygonField` instead of just a
  :class:`~django.contrib.gis.db.models.PolygonField`.

The command produces the following output, which may be copied
directly into the ``models.py`` of a GeoDjango application::

    # This is an auto-generated Django model module created by ogrinspect.
    from django.contrib.gis.db import models

    class WorldBorder(models.Model):
        fips = models.CharField(max_length=2)
        iso2 = models.CharField(max_length=2)
        iso3 = models.CharField(max_length=3)
        un = models.IntegerField()
        name = models.CharField(max_length=50)
        area = models.IntegerField()
        pop2005 = models.IntegerField()
        region = models.IntegerField()
        subregion = models.IntegerField()
        lon = models.FloatField()
        lat = models.FloatField()
        geom = models.MultiPolygonField(srid=4326)

    # Auto-generated `LayerMapping` dictionary for WorldBorder model
    worldborders_mapping = {
        'fips' : 'FIPS',
        'iso2' : 'ISO2',
        'iso3' : 'ISO3',
        'un' : 'UN',
        'name' : 'NAME',
        'area' : 'AREA',
        'pop2005' : 'POP2005',
        'region' : 'REGION',
        'subregion' : 'SUBREGION',
        'lon' : 'LON',
        'lat' : 'LAT',
        'geom' : 'MULTIPOLYGON',
    }
